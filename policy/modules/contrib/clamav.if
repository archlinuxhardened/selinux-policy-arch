## <summary>ClamAV Virus Scanner.</summary>

########################################
## <summary>
##	Execute a domain transition to run clamd.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`clamav_domtrans',`
	gen_require(`
		type clamd_t, clamd_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, clamd_exec_t, clamd_t)
')

########################################
## <summary>
##	Connect to clamd using a unix
##	domain stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_stream_connect',`
	gen_require(`
		type clamd_t, clamd_var_run_t;
	')

	files_search_pids($1)
	stream_connect_pattern($1, clamd_var_run_t, clamd_var_run_t, clamd_t)
')

########################################
## <summary>
##	Append clamav log files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_append_log',`
	gen_require(`
		type clamd_var_log_t;
	')

	logging_search_logs($1)
	allow $1 clamd_var_log_t:dir list_dir_perms;
	append_files_pattern($1, clamd_var_log_t, clamd_var_log_t)
')

########################################
## <summary>
##	Create, read, write, and delete
##	clamav pid content.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_manage_pid_content',`
	gen_require(`
		type clamd_var_run_t;
	')

	files_search_pids($1)
	manage_dirs_pattern($1, clamd_var_run_t, clamd_var_run_t)
	manage_files_pattern($1, clamd_var_run_t, clamd_var_run_t)
')

########################################
## <summary>
##	Read clamav configuration files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_read_config',`
	gen_require(`
		type clamd_etc_t;
	')

	files_search_etc($1)
	allow $1 clamd_etc_t:file read_file_perms;
')

########################################
## <summary>
##	Search clamav library directories.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_search_lib',`
	gen_require(`
		type clamd_var_lib_t;
	')

	files_search_var_lib($1)
	allow $1 clamd_var_lib_t:dir search_dir_perms;
')

########################################
## <summary>
##	Execute a domain transition to run clamscan.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed to transition.
##	</summary>
## </param>
#
interface(`clamav_domtrans_clamscan',`
	gen_require(`
		type clamscan_t, clamscan_exec_t;
	')

	corecmd_search_bin($1)
	domtrans_pattern($1, clamscan_exec_t, clamscan_t)
')

########################################
## <summary>
##	Execute clamscan in the caller domain.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_exec_clamscan',`
	gen_require(`
		type clamscan_exec_t;
	')

	corecmd_search_bin($1)
	can_exec($1, clamscan_exec_t)
')

#######################################
## <summary>
##	Read clamd process state files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`clamav_read_state_clamd',`
	gen_require(`
		type clamd_t;
	')

	kernel_search_proc($1)
	allow $1 clamd_t:dir list_dir_perms;
	read_files_pattern($1, clamd_t, clamd_t)
	read_lnk_files_pattern($1, clamd_t, clamd_t)
')

########################################
## <summary>
##	All of the rules required to
##	administrate an clamav environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`clamav_admin',`
	gen_require(`
		type clamd_t, clamd_etc_t, clamd_tmp_t;
		type clamd_var_log_t, clamd_var_lib_t, clamd_initrc_exec_t;
		type clamd_var_run_t, clamscan_t, clamscan_tmp_t;
		type freshclam_t, freshclam_var_log_t;
	')

	allow $1 { clamd_t clamscan_t freshclam_t }:process { ptrace signal_perms };
	ps_process_pattern($1, { clamd_t clamscan_t freshclam_t })

	init_startstop_service($1, $2, clamd_t, clamd_initrc_exec_t)

	files_list_etc($1)
	admin_pattern($1, clamd_etc_t)

	files_list_var_lib($1)
	admin_pattern($1, clamd_var_lib_t)

	logging_list_logs($1)
	admin_pattern($1, { clamd_var_log_t freshclam_var_log_t })

	files_list_pids($1)
	admin_pattern($1, clamd_var_run_t)

	files_list_tmp($1)
	admin_pattern($1, { clamd_tmp_t clamscan_tmp_t })
')
