## <summary>Cyrus is an IMAP service intended to be run on sealed servers.</summary>

########################################
## <summary>
##	Create, read, write, and delete
##	cyrus data files.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cyrus_manage_data',`
	gen_require(`
		type cyrus_var_lib_t;
	')

	files_search_var_lib($1)
	manage_files_pattern($1, cyrus_var_lib_t, cyrus_var_lib_t)
')

########################################
## <summary>
##	Connect to Cyrus using a unix
##	domain stream socket.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`cyrus_stream_connect',`
	gen_require(`
		type cyrus_t, cyrus_var_lib_t;
	')

	files_search_var_lib($1)
	stream_connect_pattern($1, cyrus_var_lib_t, cyrus_var_lib_t, cyrus_t)
')

########################################
## <summary>
##	All of the rules required to
##	administrate an cyrus environment.
## </summary>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
## <param name="role">
##	<summary>
##	Role allowed access.
##	</summary>
## </param>
## <rolecap/>
#
interface(`cyrus_admin',`
	gen_require(`
		type cyrus_t, cyrus_tmp_t, cyrus_var_lib_t;
		type cyrus_var_run_t, cyrus_initrc_exec_t;
		type cyrus_keytab_t;
	')

	allow $1 cyrus_t:process { ptrace signal_perms };
	ps_process_pattern($1, cyrus_t)

	init_startstop_service($1, $2, cyrus_t, cyrus_initrc_exec_t)

	files_list_etc($1)
	admin_pattern($1, cyrus_keytab_t)

	files_list_tmp($1)
	admin_pattern($1, cyrus_tmp_t)

	files_list_var_lib($1)
	admin_pattern($1, cyrus_var_lib_t)

	files_list_pids($1)
	admin_pattern($1, cyrus_var_run_t)
')
