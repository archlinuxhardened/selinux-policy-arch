## <summary>Systemd components (not PID 1)</summary>

######################################
## <summary>
##   Read systemd_login PID files.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
#
interface(`systemd_read_logind_pids',`
	gen_require(`
		type systemd_logind_var_run_t;
	')

	files_search_pids($1)
	read_files_pattern($1, systemd_logind_var_run_t, systemd_logind_var_run_t)
')

######################################
## <summary>
##   Manage systemd_login PID pipes.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
#
interface(`systemd_manage_logind_pid_pipes',`
	gen_require(`
		type systemd_logind_var_run_t;
	')

	files_search_pids($1)
	manage_fifo_files_pattern($1, systemd_logind_var_run_t, systemd_logind_var_run_t)
')

######################################
## <summary>
##   Use inherited systemd
##   logind file descriptors.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
#
interface(`systemd_use_logind_fds',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:fd use;
')

########################################
## <summary>
##   Send and receive messages from
##   systemd logind over dbus.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
#
interface(`systemd_dbus_chat_logind',`
	gen_require(`
		type systemd_logind_t;
		class dbus send_msg;
	')

	allow $1 systemd_logind_t:dbus send_msg;
	allow systemd_logind_t $1:dbus send_msg;
')

########################################
## <summary>
##   Allow process to write to systemd_kmod_conf_t.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
## <rolecap/>
#
interface(`systemd_write_kmod_files',`
	gen_require(`
		type systemd_kmod_conf_t;
	')

	write_files_pattern($1, var_run_t, systemd_kmod_conf_t)
')

########################################
## <summary>
##   Allow process to relabel to systemd_kmod_conf_t.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
## <rolecap/>
#
interface(`systemd_relabelto_kmod_files',`
	gen_require(`
		type systemd_kmod_conf_t;
	')

	allow $1 systemd_kmod_conf_t:file relabelto_file_perms;
')

########################################
## <summary>
##   Get the system status information from systemd_login
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
#
interface(`systemd_status_logind',`
	gen_require(`
		type systemd_logind_t;
		class service status;
	')

	allow $1 systemd_logind_t:service status;
')

########################################
## <summary>
##   Send systemd_login a null signal.
## </summary>
## <param name="domain">
##   <summary>
##     Domain allowed access.
##   </summary>
## </param>
#
interface(`systemd_signull_logind',`
	gen_require(`
		type systemd_logind_t;
	')

	allow $1 systemd_logind_t:process signull;
')

########################################
## <summary>
## Allow specified domain to start power units
## </summary>
## <param name="domain">
## <summary>
## Domain to not audit.
## </summary>
## </param>
#
interface(`systemd_start_power_units',`
	gen_require(`
		type power_unit_t;
		class service start;
	')

	allow $1 power_unit_t:service start;
')

########################################
## <summary>
##	Allow specified domain to parse environment to set up logging.
## </summary>
## <desc>
##	<p>
##	Many systemd daemons set-up their logging by calling
##	functions log_parse_environment and log_open, which
##	source code is available on
##	https://github.com/systemd/systemd/blob/v227/src/basic/log.c
##	</p>
##	<p>
##	Function log_parse_environment calls parse_proc_cmdline,
##	which reads /proc/cmdline and calls detect_container,
##	which reads /proc/1/environ.
##	</p>
##	<p>
##	Function log_open may call log_open_syslog, which calls
##	create_log_socket, which calls fd_inc_sndbuf, which does
##	setsockopt(fd, SOL_SOCKET, SO_SNDBUFFORCE, ...), which
##	requires CAP_NET_ADMIN.  Nevertheless if CAP_NET_ADMIN
##	access is denied, fd_inc_sndbuf falls back to using
##	SO_SNDBUF option, which does not require any capability.
##	</p>
## </desc>
## <param name="domain">
##	<summary>
##	Domain allowed access.
##	</summary>
## </param>
#
interface(`systemd_parse_log_environment',`
	# Allow to read /proc/1/environ
	init_read_state($1)
	# Allow to read /proc/cmdline
	kernel_read_system_state($1)
	# Do not audit setsockopt(fd, SOL_SOCKET, SO_SNDBUFFORCE, ...) failure
	dontaudit $1 self:capability net_admin;

	logging_send_syslog_msg($1)
')
